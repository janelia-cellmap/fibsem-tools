import net.imglib2.*;
import net.imglib2.util.*;
import org.janelia.saalfeldlab.n5.*;
import org.janelia.saalfeldlab.n5.imglib2.*;
import java.util.*;
import bdv.util.*;
import bdv.util.volatiles.*;
import mpicbg.spim.data.sequence.*;
import net.imglib2.realtransform.*;
import net.imglib2.type.volatiles.*;
import net.imglib2.cache.volatiles.*;
import net.imglib2.view.*;
import org.saalfeldlab.*;
import net.imglib2.converter.*;
import net.imglib2.type.numeric.integer.*;
import bdv.tools.bookmarks.*;
import org.jdom2.input.*;
import org.jdom2.*;
import mpicbg.spim.data.*;
import org.janelia.saalfeldlab.n5.hdf5.*;
import org.janelia.saalfeldlab.n5.*;
import org.janelia.saalfeldlab.n5.imglib2.*;
import ch.systemsx.cisd.hdf5.*;
import net.imglib2.interpolation.randomaccess.*;


//N5Reader n5Predictions = new N5FSReader("/nrs/saalfeld/heinrichl/cell/gt122018/setup01/run02/test2_200000.n5");
//String predictions = "/nrs/saalfeld/heinrichl/cell/gt122018/setup01/run02/walther_69000.n5";
N5Reader n5Predictions = new N5FSReader("/nrs/saalfeld/heinrichl/cell/unet/01-030819/jurkat_cell1_179000.n5");
N5Reader n5Raw = new N5FSReader("/groups/hess/hess_collaborators/Annotations/ParentFiles_whole-cell_images/Jurkat_Cell1_4x4x4nm/Jurkat_Cell1_FS96-Area1_4x4x4nm.n5");
bookmarksXML = "/groups/saalfeld/saalfeldlab/projects/cell/jurkat_cell1_17900/01-030819_jurkat_cell1_17900_bookmarks.xml";
resolution = new double[]{1, 1, 1};
exportPath = "/groups/saalfeld/saalfeldlab/projects/cell/jurkat_cell1_17900";
size = new long[]{256, 256, 256};
padding = new int[]{128, 128, 128};
//size = new long[]{100, 100, 100};
//padding = new int[]{64, 64, 64};

//String[] datasets = new String[]{
//	"ecs",
//	"plasma_membrane",
//	"mito",
//	"mito_DNA",
//	"mito_membrane",
//	"vesicle",
//	"vesicle_membrane",
//	"MVB",
//	"MVB_membrane",
//	"LD",
//	"LD_membrane",
//	"lysosome",
//	"lysosome_membrane",
//	"nucleus",
//	"er",
//	"ERES",
//	"NE",
//	"er_membrane",
//	"ERES_membrane",
//	"NE_membrane",
//	"chromatin",
//	"microtubules"};

//double[] thresholds = new double[]{
//	127,
//	127,
//	127,
//	127,
//	127,
//	127,
//	127,
//	127,
//	127,
//	127,
//	127,
//	127,
//	127,
//	127,
//	127,
//	127,
//	127,
//	127,
//	127,
//	127,
//	127,
//	127};

//long[] labels = new long[]{
//	1,
//	2,
//	4,
//	5,
//	3,
//	9,
//	8,
//	11,
//	10,
//	15,
//	14,
//	13,
//	12,
//	28,
//	17,
//	19,
//	21,
//	16,
//	18,
//	20,
//	26,
//	30};

String[] datasets = new String[]{
	"ecs",
	"plasma_membrane",
	"mito",
	"mito_DNA",
	"mito_membrane",
	"vesicle",
	"vesicle_membrane",
	"MVB",
	"MVB_membrane",
	"LD",
	"LD_membrane",
	"lysosome",
	"lysosome_membrane",
	"microtubules",
	"nucleus",
	"nucleolus",
	"chromatin",
	"EChrom",
	"NEChrom",
	"NHChrom",
	"er",
	"er_membrane",
	"nuclear_pore",
	"nuclear_pore_out",
	"golgi",
	"golgi_membrane"};
	
//	"ERES",
//	"NE",
//	"centrosome",
//	"distal_app",
//	"ribosomes",
//	"subdistal_app",
//};
double[] thresholds = new double[]{
	127,
	127,
	127,
	127,
	127,
	127,
	127,
	127,
	127,
	127,
	127,
	127,
	127,
	127,
	127,
	127,
	127,
	127,
	127,
	127,
	127,
	127,
	127,
	127,
	127,
	127};

long[] labels = new long[]{
	1,
	2,
	4,
	5,
	3,
	9,
	8,
	11,
	10,
	15,
	14,
	13,
	12,
	30,
	28,
	29,
	24,
	26,
	27,
	25,
	17,
	16,
	23,
	22,
	7,
	6};

//"ribosomes"
//	"nucleoplasm",

Pair open(N5Reader n5, String groupName, double[] res) {

	Pair n5Sources;
	int n;
	if (n5.datasetExists(groupName)) {
		RandomAccessibleInterval source = N5Utils.openVolatile(n5, groupName);
		n = source.numDimensions();
		double[] scale = new double[n];
		Arrays.fill(scale, 1.0);
		n5Sources = new ValuePair(new RandomAccessibleInterval[] {source}, new double[][]{scale});
	} else {
		n5Sources = N5Utils.openMipmaps(n5, groupName, true);
		n = n5Sources.getA()[0].numDimensions();
	}
	for (int k = 0; k < n5Sources.getA().length; ++k) {
		double[] scale = n5Sources.getB()[k];
		scale[0] = scale[0] * res[0];
		scale[1] = scale[1] * res[1];
		scale[2] = scale[2] * res[2];
	}
	return n5Sources;
}

RandomAccessibleInterval[] wrapAsVolatile(RandomAccessibleInterval[] sources) {

	volatileSources = new RandomAccessibleInterval[sources.length];

	for (int k = 0; k < sources.length; ++k) {
		volatileSources[k] = VolatileViews.wrapAsVolatile(
			sources[k],
			queue,
			new CacheHints(LoadingStrategy.VOLATILE, 0, true));
	}
	return volatileSources;
}

RandomAccessibleIntervalMipmapSource openSource(N5Reader n5, String groupName, double[] res, double[] offset, SharedQueue queue, type) {

	n5Sources = open(n5, groupName, res);
	volatileSources = wrapAsVolatile(n5Sources.getA());
	
	AffineTransform3D sourceTransform = new AffineTransform3D();
	sourceTransform.setTranslation(offset);

	RandomAccessibleIntervalMipmapSource mipmapSource =
		new RandomAccessibleIntervalMipmapSource(
			volatileSources,
			type,
			n5Sources.getB(),
			new FinalVoxelDimensions("px", res),
			sourceTransform,
			groupName);

	return mipmapSource;
}


HashMap loadBookmarks(String xmlPath) {

	HashMap bookmarks = new HashMap();;
	
	SAXBuilder sax = new SAXBuilder();
	Document doc = sax.build(bookmarksXML);
	Element root = doc.getRootElement();
	
	Element elemBookmarks = root.getChild( "Bookmarks" );
	if (elemBookmarks != null) {
		for (Element elem : elemBookmarks.getChildren("Bookmark")){
			String key = XmlHelpers.getText( elem, "key" );
			AffineTransform3D transform = XmlHelpers.getAffineTransform3D(elem, "transform");
			bookmarks.put(key, transform);
		}
	}
	return bookmarks;
}

double[] getCenterPoint(AffineTransform3D transform) {

	target = new double[]{0, 0, 0};
	transform.applyInverse(target, target);
	return target;
}

void saveHDF5(String hdf5Path, raw, labels) {

	hdf5Writer = HDF5Factory.open(hdf5Path);
	n5Writer = new N5HDF5Writer(hdf5Writer, new int[]{64, 64, 64});

	N5Utils.save(
		raw,
		n5Writer,
		"/volumes/raw",
		new int[]{64, 64, 64},
		new GzipCompression());

	
	n5Writer.setAttribute(
		"/volumes/raw",
		"resolution",
		new double[]{4, 4, 4});

	n5Writer.setAttribute(
			"/volumes/raw",
			"offset",
			new double[]{0, 0, 0});

	extendedLabels = Views.extendValue(labels, new UnsignedLongType(-3));
	interpolatedExtendedLabels = Views.interpolate(
		extendedLabels,
		new NearestNeighborInterpolatorFactory());

	affine = new AffineTransform3D();
	affine.scale(2);
	affine.translate(new double[]{0.5, 0.5, 0.5});
	transformedLabels = Views.offsetInterval(
		RealViews.affine(
				interpolatedExtendedLabels,
				affine),
		new long[]{0, 0, 0},
		new long[]{
				labels.dimension(0) * 2,
				labels.dimension(1) * 2,
				labels.dimension(2) * 2});

	N5Utils.save(
		transformedLabels,
		n5Writer,
		"/volumes/labels/gt",
		new int[]{64, 64, 64},
		new GzipCompression());

	n5Writer.setAttribute(
		"/volumes/labels/gt",
		"resolution",
		new double[]{2, 2, 2});

	/* offset such that top left corner of first pixel aligns, i.e. 0.5px at target resolution less than naively scaled */
	n5Writer.setAttribute(
			"/volumes/labels/gt",
			"offset",
			new double[]{
				padding[0] * 4 - 1,
				padding[1] * 4 - 1,
				padding[2] * 4 - 1});

	hdf5Writer.close();
}

BdvOptions bdvOptions = Bdv.options();

//int numProc = Runtime.getRuntime().availableProcessors();
//SharedQueue queue = new SharedQueue(Math.min(8, Math.max(1, numProc / 2)));

//bdv = BdvFunctions.show(
//	openSource(n5Raw, "/volumes/raw", resolution, new double[]{0, 0, 0}, queue, new VolatileUnsignedByteType()),
////	openSource(n5Raw, "/volumes/raw/data", new double[]{4, 4, 4}, new double[]{0, 0, 0}, new VolatileUnsignedShortType()),
//	bdvOptions);
//bdv.setDisplayRange(0, 255);

raw = N5Utils.open(n5Raw, "/volumes/raw");


ArrayList predictions = new ArrayList();
for (dataset : datasets) {
	predictions.add(open(n5Predictions, dataset, resolution).getA()[0]);
}

converter = new ThresholdRealCompositeConverter(thresholds, labels, 0);

predictionsComposite = Views.collapseReal(Views.stack(predictions));

convertedLabels = Converters.convertRAI(
	predictionsComposite,
	converter,
	new UnsignedLongType());

bookmarks = loadBookmarks(bookmarksXML);

PrintWriter writer = new PrintWriter(exportPath + "/" + "export.txt", "UTF-8");

for (bookmark : bookmarks.entrySet()) {
	center = getCenterPoint(bookmark.getValue());
	minLabels = new long[]{
		Math.round(center[0]) - size[0] / 2,
		Math.round(center[1]) - size[1] / 2,
		Math.round(center[2]) - size[2] / 2};
	minRaw = new long[]{
		minLabels[0] - padding[0],
		minLabels[1] - padding[1],
		minLabels[2] - padding[2]};

	rawCrop = Views.offsetInterval(
		Views.extendZero(raw),
		minRaw,
		new long[]{
			size[0] + padding[0] + padding[0],
			size[1] + padding[1] + padding[1],
			size[2] + padding[2] + padding[2]});

	labelsCrop = Views.offsetInterval(
		Views.extendValue(
			convertedLabels,
			new UnsignedLongType(-3L)),
		minLabels,
		size);

	saveHDF5(exportPath + "/crop-" + bookmark.getKey() + ".h5", rawCrop, labelsCrop);

	writer.println(bookmark.getKey() + ": " + Arrays.toString(minRaw));
}

writer.close();





//int i = 0;




//bdv.setColor(new ARGBType(argb(id++)));