/*
 * May this be the final version?
 */
import bdv.labels.labelset.*;

import ij.IJ;
import ij.ImagePlus;
import ij.ImageStack;
import ij.process.FloatProcessor;

import net.imglib2.converter.*;

import java.lang.Thread;
import java.lang.Runnable;
import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicInteger;

import net.imglib2.*;
import net.imglib2.converter.*;
import net.imglib2.img.display.imagej.*;
import net.imglib2.img.array.*;
import net.imglib2.img.imageplus.*;
import net.imglib2.interpolation.randomaccess.*;
import net.imglib2.realtransform.*;
import net.imglib2.type.numeric.integer.*;
import net.imglib2.util.*;
import net.imglib2.view.*;

import bdv.labels.labelset.*;

import org.janelia.saalfeldlab.n5.hdf5.*;
import org.janelia.saalfeldlab.n5.*;
import org.janelia.saalfeldlab.n5.imglib2.*;

import ch.systemsx.cisd.hdf5.*;


/* custom parameters */
offset = 128; //normally 256
x = 6940 + 128; //add 128 for prediction crops
y = 96 + 128; //add 128 for prediction crops
z = 4205 + 128; //add 128 for prediction crops
w = 256;
h = 256;
d = 256;
xo = x - offset;
yo = y - offset;
zo = z - offset;
ow = w + offset + offset;
oh = h + offset + offset;
od = d + offset + offset;


/* main */
/* images */
//hdf5Reader = HDF5Factory.openForReading("/groups/hess/hess_collaborators/Annotations/ParentFiles_whole-cell_images/FlyBrain_VNC_Sec16_4x4x4nm/destreak_20_2000_-0.5_2.5/VNC_Sec16_destreak_4x4x4nm.n5");
n5Reader = new N5FSReader("/groups/hess/hess_collaborators/Annotations/ParentFiles_whole-cell_images/Jurkat_Cell1_4x4x4nm/Jurkat_Cell1_FS96-Area1_4x4x4nm.n5");

img = N5Utils.open(n5Reader, "/volumes/raw");
extended = Views.extendValue(img, new UnsignedShortType(0));
convertedExtended = Converters.convert(
	extended,
	new RealUnsignedByteConverter(0, 255), // <- forgot to save this yesterday
	new UnsignedByteType());
cropPadded = Views.offsetInterval(
		convertedExtended,
		new long[]{xo, yo, zo},
		new long[]{ow, oh, od});
		
ImageJFunctions.show(cropPadded);

/* labels */
gt = new ImagePlus("", IJ.openImage("/groups/hess/hess_collaborators/Proofreading/01-030819/jurkat_cell1_17900/jurkat_cell1_17900/crop-1/jurkat_cell1_er_dummy.tif").getStack());
gtImg = ImagePlusImgs.from(gt);
imgLabels = ArrayImgs.unsignedLongs(Intervals.dimensionsAsLongArray(gtImg));

sourceCursor = gtImg.cursor();
targetCursor = imgLabels.cursor();
while (sourceCursor.hasNext())
	targetCursor.next().set(sourceCursor.next().getIntegerLong());

ImageJFunctions.show(imgLabels);

/* retain this here for when annotations were performned at 4nm and you want them now at 2nm/px */
//extendedLabels = Views.extendValue(imgLabels, new UnsignedLongType(Label.OUTSIDE));
//interpolatedExtendedLabels = Views.interpolate(
//		extendedLabels,
//		new NearestNeighborInterpolatorFactory());

//affine = new AffineTransform3D();
//affine.scale(2);
//affine.translate(new double[]{0.5, 0.5, 0.5});
//transformedLabels = Views.offsetInterval(
//		RealViews.affine(
//				interpolatedExtendedLabels,
//				affine),
//		new long[]{0, 0, 0},
//		new long[]{
//				imgLabels.dimension(0) * 2,
//				imgLabels.dimension(1) * 2,
//				imgLabels.dimension(2) * 2});

//ImageJFunctions.show(transformedLabels);

hdf5Writer = HDF5Factory.open(
		"/groups/hess/hess_collaborators/Proofreading/01-030819/jurkat_cell1_17900/jurkat_cell1_17900/crop-1/jurkat_cell1_er_dummy_"
		+ ow +
		"x" + oh +
		"x" + od +
		(xo >= 0 ? "+" : "") + xo +
		(yo >= 0 ? "+" : "") + yo +
		(zo >= 0 ? "+" : "") + zo +
		".h5");
n5Writer = new N5HDF5Writer(hdf5Writer, null);


N5Utils.save(
//		transformedLabels,
		imgLabels,
		n5Writer,
		"/volumes/labels/gt",
		new int[]{64, 64, 64},
		new GzipCompression());

n5Writer.setAttribute(
		"/volumes/labels/gt",
		"resolution",
		new double[]{2, 2, 2});

/* offset such that top left corner of first pixel aligns, i.e. 0.5px at target resolution less than naively scaled */
off = offset * 4 - 1;
n5Writer.setAttribute(
		"/volumes/labels/gt",
		"offset",
		new double[]{off, off, off});

N5Utils.save(
		cropPadded,
		n5Writer,
		"/volumes/raw",
		new int[]{64, 64, 64},
		new GzipCompression());

n5Writer.setAttribute(
		"/volumes/raw",
		"resolution",
		new double[]{4, 4, 4});

n5Writer.setAttribute(
		"/volumes/raw",
		"offset",
		new double[]{0, 0, 0});

hdf5Writer.close();
